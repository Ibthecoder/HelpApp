{
  "openapi": "3.0.0",
  "info": {
    "title": "Help App API",
    "version": "1.0.0",
    "description": "Backend API for the Help App platform, connecting clients with service providers."
  },
  
  "tags": [
    { "name": "User Management", "description": "User authentication and profile management" },
    { "name": "Services", "description": "Service types and offerings" },
    { "name": "Bookings", "description": "Service booking management" },
    { "name": "Reviews", "description": "Service reviews" }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "role": { "type": "string", "enum": ["CLIENT", "PROVIDER", "ADMIN"] },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": { "type": "string", "format": "email" },
          "password": { "type": "string" }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string" },
          "token": { "type": "string" },
          "user": { "$ref": "#/components/schemas/User" }
        }
      },
      "SignupRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "password": { "type": "string" },
          "role": { "type": "string", "enum": ["CLIENT", "PROVIDER", "ADMIN"], "default": "CLIENT" }
        }
      },
      "SignupResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string" },
          "token": { "type": "string" },
          "user": { "$ref": "#/components/schemas/User" }
        }
      },
      "ServiceType": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "CreateServiceTypeRequest": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" }
        }
      },
      "Service": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "title": { "type": "string" },
          "description": { "type": "string" },
          "price": { "type": "number", "format": "float" },
          "providerId": { "type": "string" },
          "serviceTypeId": { "type": "string" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "Booking": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "clientId": { "type": "string" },
          "providerId": { "type": "string" },
          "serviceId": { "type": "string" },
          "status": { "type": "string", "enum": ["PENDING", "ACCEPTED", "REJECTED", "COMPLETED"] },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" },
          "client": { "$ref": "#/components/schemas/User" },
          "provider": { "$ref": "#/components/schemas/User" },
          "service": { "$ref": "#/components/schemas/Service" }
        }
      },
      "CreateBookingRequest": {
        "type": "object",
        "required": ["providerId", "serviceId"],
        "properties": {
          "providerId": { "type": "string" },
          "serviceId": { "type": "string" }
        }
      },
      "UpdateBookingStatusRequest": {
        "type": "object",
        "required": ["status"],
        "properties": {
          "status": { "type": "string", "enum": ["PENDING", "ACCEPTED", "REJECTED", "COMPLETED"] }
        }
      },
      "Review": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "rating": { "type": "integer", "format": "int32", "minimum": 1, "maximum": 5 },
          "comment": { "type": "string" },
          "bookingId": { "type": "string" },
          "authorId": { "type": "string" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "CreateReviewRequest": {
        "type": "object",
        "required": ["bookingId", "rating"],
        "properties": {
          "bookingId": { "type": "string" },
          "rating": { "type": "integer", "format": "int32", "minimum": 1, "maximum": 5 },
          "comment": { "type": "string" }
        }
      }
    }
  },
  "paths": {
    "/api/signup": {
      "post": {
        "tags": ["User Management"],
        "summary": "Register a new user (client or service provider)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SignupRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SignupResponse" }
              }
            }
          },
          "409": { "description": "Email already in use" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/login": {
      "post": {
        "tags": ["User Management"],
        "summary": "Authenticate user and return JWT",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LoginRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LoginResponse" }
              }
            }
          },
          "401": { "description": "Invalid email or password" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/me": {
      "get": {
        "tags": ["User Management"],
        "summary": "Return current user profile",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "404": { "description": "User not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/services": {
      "get": {
        "tags": ["Services"],
        "summary": "List all available service types",
        "responses": {
          "200": {
            "description": "List of service types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ServiceType" }
                }
              }
            }
          },
          "500": { "description": "Internal server error" }
        }
      },
      "post": {
        "tags": ["Services"],
        "summary": "(Admin only) Create a new service type",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateServiceTypeRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Service type created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ServiceType" }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden: Insufficient privileges" },
          "409": { "description": "Service type name already exists" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/bookings": {
      "post": {
        "tags": ["Bookings"],
        "summary": "Client books a service provider",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateBookingRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Booking created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Booking" }
              }
            }
          },
          "400": { "description": "Invalid request or data" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden: Only clients can create bookings" },
          "500": { "description": "Internal server error" }
        }
      },
      "get": {
        "tags": ["Bookings"],
        "summary": "Return bookings for the logged-in user",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "List of bookings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Booking" }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/bookings/{id}": {
      "patch": {
        "tags": ["Bookings"],
        "summary": "Provider accepts or rejects a booking",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "ID of the booking to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateBookingStatusRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Booking status updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Booking" }
              }
            }
          },
          "400": { "description": "Invalid request, booking not found, or invalid status transition" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden: Only providers can update booking status" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/reviews": {
      "post": {
        "tags": ["Reviews"],
        "summary": "Client reviews a completed service",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateReviewRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Review created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Review" }
              }
            }
          },
          "400": { "description": "Invalid request, booking not found, or review already exists" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden: Only clients can create reviews" },
          "500": { "description": "Internal server error" }
        }
      }
    }
  }
}
